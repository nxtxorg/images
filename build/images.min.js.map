{"version":3,"file":"images.min.js","sources":["../nxtx-interface.ts","../src/images.ts"],"sourcesContent":["export interface Node {\n    type: NodeType,\n    value?: any,\n    name?: string,\n    args?: Array<Node>\n}\nexport enum NodeType {\n    Paragraph = 1,\n    Command,\n    Text,\n    Block,\n    Html,\n    Node,\n\n    Boolean = 10,\n    Dictionary = 11,\n    Array,\n    Number,\n    String\n}\n\nexport interface ArgumentCheck {\n    expected: NodeType,\n    actual: NodeType,\n    index: number\n}\nexport interface ArgumentCheckResult {\n    ok: boolean,\n    invalid: Array<ArgumentCheck>\n}\n\ntype CommandResultTypes = Node | HTMLElement | Text | undefined | void\ntype CommandResultType = Promise<CommandResultTypes> | CommandResultTypes\nexport type CommandResult = Array<CommandResultType> | CommandResultType\nexport type CommandFunction = (...args:Array<Node>) => CommandResult\n\nexport interface Package {\n    name: string,\n    requires?: Array<string>,\n    commands?: { [name:string]: CommandFunction },\n    preprocessors?: { [name:string]: CommandFunction },\n    hooks?: { prerender?:()=>void, midrender?:()=>void, postrender?:()=>void }\n}\n\nexport type RenderEvent = 'prerender'|'midrender'|'postrender'\n\nexport interface INxtx {\n    registerCommand: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    registerPreprocessor: (cmd:string, fn:CommandFunction, overwrite?:boolean) => void\n    verifyArguments: (types:Array<NodeType>, ...args:Array<Node>) => ArgumentCheckResult\n    registerPackage: (pkg:Package) => void\n\n    parse: (code:string) => Array<Node>\n    render: (code:string, root:HTMLElement) => Promise<void>\n\n    text: (content:string) => Text\n    htmlLite: (nodeName:string, attributes:object, ...children:Array<HTMLElement|string>) => HTMLElement\n    html: (nodeName:string, attributes:object, ...children:Array<Promise<HTMLElement|Node|string>|HTMLElement|Node|string>) => Promise<HTMLElement>\n\n    on: (event:RenderEvent, handler:()=>void) => void\n    off: (event:RenderEvent, handler:()=>void) => void\n}","/*  Image package for nxtx\n    Author: Malte Rosenbjerg\n    License: MIT */\n\nimport {NodeType, Package, INxtx} from '../nxtx-interface';\ndeclare const nxtx: INxtx;\n\nconst pkg : Package = {\n    name: 'images',\n    commands: {\n        'image': (srcNode, pctNode = { type: NodeType.Number, value: 100 }) => nxtx.htmlLite('img', { src: srcNode.value, style: `max-width: ${pctNode.value}%` }),\n        'images': (srcArray) => srcArray.value.map(srcNode => nxtx.htmlLite('img', { src: srcNode.value, style: `max-width: calc(${(99.9 / srcArray.value.length)}% - 4px); margin: 2px` }))\n    }\n};\n\nif (nxtx) nxtx.registerPackage(pkg);\n\nexport default pkg;"],"names":["NodeType","pkg","name","commands","image","srcNode","pctNode","type","Number","value","nxtx","htmlLite","src","style","images","srcArray","map","length","registerPackage"],"mappings":"mCAMA,IAAYA,GAAZ,SAAYA,GACRA,6BACAA,yBACAA,mBACAA,qBACAA,mBACAA,mBAEAA,0BACAA,gCACAA,sBACAA,wBACAA,wBAZJ,CAAYA,IAAAA,OCCZ,IAAMC,EAAgB,CAClBC,KAAM,SACNC,SAAU,CACNC,MAAS,SAACC,EAASC,GAAoD,oBAApDA,GAAYC,KAAMP,EAASQ,OAAQC,MAAO,MAAUC,KAAKC,SAAS,MAAO,CAAEC,IAAKP,EAAQI,MAAOI,MAAO,cAAcP,EAAQG,aAC/IK,OAAU,SAACC,GAAa,OAAAA,EAASN,MAAMO,IAAI,SAAAX,GAAW,OAAAK,KAAKC,SAAS,MAAO,CAAEC,IAAKP,EAAQI,MAAOI,MAAO,mBAAoB,KAAOE,EAASN,MAAMQ,6CAItJP,MAAMA,KAAKQ,gBAAgBjB"}